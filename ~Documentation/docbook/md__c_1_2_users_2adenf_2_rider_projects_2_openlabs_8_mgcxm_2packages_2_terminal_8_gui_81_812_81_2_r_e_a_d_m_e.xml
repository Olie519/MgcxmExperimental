<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e" xml:lang="en-US">
<title>README</title>
<indexterm><primary>README</primary></indexterm>

<para>   <link xlink:href="https://www.nuget.org/packages/Terminal.Gui"></link>  <link xlink:href="https://www.nuget.org/packages/Terminal.Gui"></link> [](LICENSE) </para>

<para><emphasis><emphasis role="bold">The current, stable, release of Terminal.Gui is <link xlink:href="https://www.nuget.org/packages/Terminal.Gui">v1.x</link>. It is stable, rich, and broadly used. The team is now focused on designing and building a significant upgrade we&apos;re referring to as <computeroutput>v2</computeroutput>. Therefore:</emphasis></emphasis><itemizedlist>
<listitem>
<para>*<computeroutput>v1</computeroutput> is now in maintenance mode, meaning we will accept PRs for v1.x (the <computeroutput>develop</computeroutput> branch) only for issues impacting existing functionality.*</para>
</listitem><listitem>
<para><emphasis>All new development happens on the <computeroutput>v2_develop</computeroutput> branch. See the V2 discussion <link xlink:href="https://github.com/gui-cs/Terminal.Gui/discussions/1940">here</link>.</emphasis></para>
</listitem><listitem>
<para><emphasis>Developers are encouraged to continue building on <link xlink:href="https://www.nuget.org/packages/Terminal.Gui">v1.x</link> until we announce <computeroutput>v2</computeroutput> is stable.</emphasis></para>
</listitem></itemizedlist>
</para>

<para><emphasis role="bold">Terminal.Gui</emphasis>: A toolkit for building rich console apps for .NET, .NET Core, and Mono that works on Windows, the Mac, and Linux/Unix.</para>

<para></para>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md2">
<title>Quick Start</title>

<para>Paste these commands into your favorite terminal on Windows, Mac, or Linux. This will install the <link xlink:href="https://github.com/gui-cs/Terminal.Gui.templates">Terminal.Gui.Templates</link>, create a new &quot;Hello World&quot; TUI app, and run it.</para>

<para>(Press <computeroutput>CTRL-Q</computeroutput> to exit the app)</para>

<para><literallayout><computeroutput>dotnet&#32;new&#32;--install&#32;Terminal.Gui.templates
dotnet&#32;new&#32;tui&#32;-n&#32;myproj
cd&#32;myproj
dotnet&#32;run
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md3">
<title>Documentation</title>

<para><itemizedlist>
<listitem>
<para><link xlink:href="https://gui-cs.github.io/Terminal.Gui/index.html">Documentation Home</link></para>
</listitem><listitem>
<para><link xlink:href="https://gui-cs.github.io/Terminal.Gui/articles/overview.html">Terminal.Gui Overview</link></para>
</listitem><listitem>
<para><link xlink:href="https://gui-cs.github.io/Terminal.Gui/articles/views.html">List of Views/Controls</link></para>
</listitem><listitem>
<para><link xlink:href="https://gui-cs.github.io/Terminal.Gui/articles/index.html">Conceptual Documentation</link></para>
</listitem><listitem>
<para><link xlink:href="https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.html">API Documentation</link></para>
</listitem></itemizedlist>
</para>

<para><emphasis>The Documentation matches the most recent Nuget release from the <computeroutput>main</computeroutput> branch (<link xlink:href="https://www.nuget.org/packages/Terminal.Gui"></link>)</emphasis></para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md4">
<title>Features</title>

<para><itemizedlist>
<listitem>
<para><emphasis role="bold">Cross Platform</emphasis> - Windows, Mac, and Linux. Terminal drivers for Curses, <link xlink:href="https://github.com/gui-cs/Terminal.Gui/issues/27">Windows Console</link>, and the .NET Console mean apps will work well on both color and monochrome terminals.</para>
</listitem><listitem>
<para><emphasis role="bold">Keyboard and Mouse Input</emphasis> - Both keyboard and mouse input are supported, including support for drag &amp; drop.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://gui-cs.github.io/Terminal.Gui/articles/overview.html#layout">Flexible Layout</link></emphasis> - Supports both <emphasis>Absolute layout</emphasis> and an innovative <emphasis>Computed Layout</emphasis> system. <emphasis>Computed Layout</emphasis> makes it easy to layout controls relative to each other and enables dynamic terminal UIs.</para>
</listitem><listitem>
<para><emphasis role="bold">Clipboard support</emphasis> - Cut, Copy, and Paste of text provided through the <link xlink:href="https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.Clipboard.html"><computeroutput>Clipboard</computeroutput></link> class.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.View.html">Arbitrary Views</link></emphasis> - All visible UI elements are subclasses of the <computeroutput>View</computeroutput> class, and these in turn can contain an arbitrary number of sub-views.</para>
</listitem><listitem>
<para><emphasis role="bold">Advanced App Features</emphasis> - The <link xlink:href="https://gui-cs.github.io/Terminal.Gui/api/Terminal.Gui/Terminal.Gui.MainLoop.html">Mainloop</link> supports processing events, idle handlers, timers, and monitoring file descriptors. Most classes are safe for threading.</para>
</listitem><listitem>
<para><emphasis role="bold">Reactive Extensions</emphasis> - Use <link xlink:href="https://github.com/dotnet/reactive">reactive extensions</link> and benefit from increased code readability, and the ability to apply the MVVM pattern and <link xlink:href="https://www.reactiveui.net/">ReactiveUI</link> data bindings. See the <link xlink:href="https://github.com/gui-cs/Terminal.Gui/tree/master/ReactiveExample">source code</link> of a sample app in order to learn how to achieve this.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md5">
<title>Showcase &amp; Examples</title>

<para><itemizedlist>
<listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/gui-cs/Terminal.Gui/tree/master/UICatalog">UI Catalog</link></emphasis> - The UI Catalog project provides an easy to use and extend sample illustrating the capabilities of <emphasis role="bold">Terminal.Gui</emphasis>. Run <computeroutput>dotnet run --project UICatalog</computeroutput> to run the UI Catalog.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/gui-cs/Terminal.Gui/tree/master/Example">C# Example</link></emphasis> - Run <computeroutput>dotnet run</computeroutput> in the <computeroutput>Example</computeroutput> directory to run the C# Example.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/gui-cs/Terminal.Gui/tree/master/FSharpExample">F# Example</link></emphasis> - An example showing how to build a Terminal.Gui app using F#.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/gui-cs/Terminal.Gui/tree/master/ReactiveExample">Reactive Example</link></emphasis> - A sample app that shows how to use <computeroutput>System.Reactive</computeroutput> and <computeroutput>ReactiveUI</computeroutput> with <computeroutput>Terminal.Gui</computeroutput>. The app uses the MVVM architecture that may seem familiar to folks coming from WPF, Xamarin Forms, UWP, Avalonia, or Windows Forms. In this app, we implement the data bindings using ReactiveUI <computeroutput>WhenAnyValue</computeroutput> syntax and <link xlink:href="https://github.com/reactiveui/pharmacist">Pharmacist</link> â€” a tool that converts all events in a NuGet package into observable wrappers.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/PowerShell/GraphicalTools">PowerShell&apos;s <computeroutput>Out-ConsoleGridView</computeroutput></link></emphasis> - <computeroutput>OCGV</computeroutput> sends the output from a command to an interactive table.</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/En3Tho/PoshRedisViewer">PoshRedisViewer</link></emphasis> - A compact Redis viewer module for PowerShell written in F# and Gui.cs</para>
</listitem><listitem>
<para><emphasis role="bold"><link xlink:href="https://github.com/tznind/TerminalGuiDesigner">TerminalGuiDesigner</link></emphasis> - Cross platform view designer for building Terminal.Gui applications.</para>
</listitem></itemizedlist>
</para>

<para>See the <link xlink:href="https://github.com/gui-cs/Terminal.Gui/tree/master/Terminal.Gui"><computeroutput>Terminal.Gui/</computeroutput> README</link> for an overview of how the library is structured. The <link xlink:href="https://gui-cs.github.io/Terminal.Gui/articles/index.html">Conceptual Documentation</link> provides insight into core concepts.</para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md6">
<title>Sample Usage in C</title>

<para>The following example shows a basic Terminal.Gui application written in C#:</para>

<para><literallayout><computeroutput>//&#32;A&#32;simple&#32;Terminal.Gui&#32;example&#32;in&#32;C#&#32;-&#32;using&#32;C#&#32;9.0&#32;Top-level&#32;statements

using&#32;Terminal.Gui;

Application.Run&lt;ExampleWindow&gt;&#32;();

System.Console.WriteLine&#32;($&quot;Username:&#32;{((ExampleWindow)Application.Top).usernameText.Text}&quot;);

//&#32;Before&#32;the&#32;application&#32;exits,&#32;reset&#32;Terminal.Gui&#32;for&#32;clean&#32;shutdown
Application.Shutdown&#32;();

//&#32;Defines&#32;a&#32;top-level&#32;window&#32;with&#32;border&#32;and&#32;title
public&#32;class&#32;ExampleWindow&#32;:&#32;Window&#32;{
&#32;&#32;&#32;&#32;public&#32;TextField&#32;usernameText;
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;public&#32;ExampleWindow&#32;()
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Title&#32;=&#32;&quot;Example&#32;App&#32;(Ctrl+Q&#32;to&#32;quit)&quot;;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Create&#32;input&#32;components&#32;and&#32;labels
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;usernameLabel&#32;=&#32;new&#32;Label&#32;()&#32;{&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Text&#32;=&#32;&quot;Username:&quot;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;usernameText&#32;=&#32;new&#32;TextField&#32;(&quot;&quot;)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Position&#32;text&#32;field&#32;adjacent&#32;to&#32;the&#32;label
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;Pos.Right&#32;(usernameLabel)&#32;+&#32;1,

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Fill&#32;remaining&#32;horizontal&#32;space
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Width&#32;=&#32;Dim.Fill&#32;(),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;passwordLabel&#32;=&#32;new&#32;Label&#32;()&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Text&#32;=&#32;&quot;Password:&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;Pos.Left&#32;(usernameLabel),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Y&#32;=&#32;Pos.Bottom&#32;(usernameLabel)&#32;+&#32;1
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;passwordText&#32;=&#32;new&#32;TextField&#32;(&quot;&quot;)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Secret&#32;=&#32;true,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;align&#32;with&#32;the&#32;text&#32;box&#32;above
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;Pos.Left&#32;(usernameText),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Y&#32;=&#32;Pos.Top&#32;(passwordLabel),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Width&#32;=&#32;Dim.Fill&#32;(),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Create&#32;login&#32;button
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;btnLogin&#32;=&#32;new&#32;Button&#32;()&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Text&#32;=&#32;&quot;Login&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Y&#32;=&#32;Pos.Bottom(passwordLabel)&#32;+&#32;1,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;center&#32;the&#32;login&#32;button&#32;horizontally
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;X&#32;=&#32;Pos.Center&#32;(),
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IsDefault&#32;=&#32;true,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;When&#32;login&#32;button&#32;is&#32;clicked&#32;display&#32;a&#32;message&#32;popup
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;btnLogin.Clicked&#32;+=&#32;()&#32;=&gt;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(usernameText.Text&#32;==&#32;&quot;admin&quot;&#32;&amp;&amp;&#32;passwordText.Text&#32;==&#32;&quot;password&quot;)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MessageBox.Query&#32;(&quot;Logging&#32;In&quot;,&#32;&quot;Login&#32;Successful&quot;,&#32;&quot;Ok&quot;);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Application.RequestStop&#32;();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MessageBox.ErrorQuery&#32;(&quot;Logging&#32;In&quot;,&#32;&quot;Incorrect&#32;username&#32;or&#32;password&quot;,&#32;&quot;Ok&quot;);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Add&#32;the&#32;views&#32;to&#32;the&#32;Window
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add&#32;(usernameLabel,&#32;usernameText,&#32;passwordLabel,&#32;passwordText,&#32;btnLogin);
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>When run the application looks as follows:</para>

<para></para>

<para><emphasis>Sample application running</emphasis></para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md7">
<title>Installing</title>

<para>Use NuGet to install the <computeroutput>Terminal.Gui</computeroutput> NuGet package: <link xlink:href="https://www.nuget.org/packages/Terminal.Gui">https://www.nuget.org/packages/Terminal.Gui</link></para>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md8">
<title>Installation in .NET Core Projects</title>

<para>To install Terminal.Gui into a .NET Core project, use the <computeroutput>dotnet</computeroutput> CLI tool with following command.</para>

<para><literallayout><computeroutput>dotnet&#32;add&#32;package&#32;Terminal.Gui
</computeroutput></literallayout></para>

<para>Or, you can use the <link xlink:href="https://github.com/gui-cs/Terminal.Gui.templates">Terminal.Gui.Templates</link>.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md9">
<title>Building the Library and Running the Examples</title>

<para><itemizedlist>
<listitem>
<para>Windows, Mac, and Linux - Build and run using the .NET SDK command line tools (<computeroutput>dotnet build</computeroutput> in the root directory). Run <computeroutput>UICatalog</computeroutput> with <computeroutput>dotnet run --project UICatalog</computeroutput>.</para>
</listitem><listitem>
<para>Windows - Open <computeroutput>Terminal.sln</computeroutput> with Visual Studio 2022.</para>
</listitem></itemizedlist>
</para>

<para>See CONTRIBUTING.md for instructions for downloading and forking the source.</para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md10">
<title>Contributing</title>

<para>See <link xlink:href="https://github.com/gui-cs/Terminal.Gui/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</link>.</para>

<para>Debates on architecture and design can be found in Issues tagged with <link xlink:href="https://github.com/gui-cs/Terminal.Gui/issues?q=is%3Aopen+is%3Aissue+label%3Adesign">design</link>.</para>
</section>
<section xml:id="_md__c_1_2_users_2adenf_2_rider_projects_2_openlabs_8_mgcxm_2packages_2_terminal_8_gui_81_812_81_2_r_e_a_d_m_e_1autotoc_md11">
<title>History</title>

<para>See <link xlink:href="https://github.com/gui-cs/">gui-cs</link> for how this project came to be. </para>
</section>
</section>
