<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="interface_j_w_t_1_1_i_jwt_validator" kind="interface" language="C#" prot="public">
    <compoundname>JWT::IJwtValidator</compoundname>
    <derivedcompoundref refid="class_j_w_t_1_1_jwt_validator" prot="public" virt="non-virtual">JWT.JwtValidator</derivedcompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="interface_j_w_t_1_1_i_jwt_validator_1ac2a038110fce4e9543386421dc866497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JWT.IJwtValidator.Validate</definition>
        <argsstring>(string decodedPayload, string signature, params string[] decodedSignatures)</argsstring>
        <name>Validate</name>
        <qualifiedname>JWT.IJwtValidator.Validate</qualifiedname>
        <reimplementedby refid="class_j_w_t_1_1_jwt_validator_1a40a34370eba0e6d1e71d9c585006e0c5">Validate</reimplementedby>
        <param>
          <type>string</type>
          <declname>decodedPayload</declname>
        </param>
        <param>
          <type>string</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>params string[]</type>
          <declname>decodedSignatures</declname>
        </param>
        <briefdescription>
<para>Given the <ref refid="namespace_j_w_t" kindref="compound">JWT</ref>, verifies its signature correctness. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decodedPayload</parametername>
</parameternamelist>
<parameterdescription>
<para>&gt;An arbitrary payload (already serialized to JSON)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoded body</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedSignatures</parametername>
</parameternamelist>
<parameterdescription>
<para>The signatures to validate with</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" line="17" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interface_j_w_t_1_1_i_jwt_validator_1a3338c5c0f418836f9eaf1a84482ce5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JWT.IJwtValidator.Validate</definition>
        <argsstring>(string decodedPayload, IAsymmetricAlgorithm alg, byte[] bytesToSign, byte[] decodedSignature)</argsstring>
        <name>Validate</name>
        <qualifiedname>JWT.IJwtValidator.Validate</qualifiedname>
        <reimplementedby refid="class_j_w_t_1_1_jwt_validator_1af52b2455c4d608013cd077fc41dd3421">Validate</reimplementedby>
        <param>
          <type>string</type>
          <declname>decodedPayload</declname>
        </param>
        <param>
          <type><ref refid="interface_j_w_t_1_1_algorithms_1_1_i_asymmetric_algorithm" kindref="compound">IAsymmetricAlgorithm</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>bytesToSign</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>decodedSignature</declname>
        </param>
        <briefdescription>
<para>Given the <ref refid="namespace_j_w_t" kindref="compound">JWT</ref>, verifies its signature correctness. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by the asymmetric algorithms only. </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>decodedPayload</parametername>
</parameternamelist>
<parameterdescription>
<para>&gt;An arbitrary payload (already serialized to JSON)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The asymmetric algorithm to validate with</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytesToSign</parametername>
</parameternamelist>
<parameterdescription>
<para>The header and payload bytes to validate</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedSignature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature to validate with</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" line="29" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interface_j_w_t_1_1_i_jwt_validator_1a00359e1aaa882dce7d2bc71794e3df6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JWT.IJwtValidator.TryValidate</definition>
        <argsstring>(string payloadJson, string signature, string decodedSignature, out Exception ex)</argsstring>
        <name>TryValidate</name>
        <qualifiedname>JWT.IJwtValidator.TryValidate</qualifiedname>
        <reimplementedby refid="class_j_w_t_1_1_jwt_validator_1a729b5ad4f3b551b967bf6f0b1d558b56">TryValidate</reimplementedby>
        <param>
          <type>string</type>
          <declname>payloadJson</declname>
        </param>
        <param>
          <type>string</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>string</type>
          <declname>decodedSignature</declname>
        </param>
        <param>
          <type>out Exception</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Given the <ref refid="namespace_j_w_t" kindref="compound">JWT</ref>, verifies its signature correctness without throwing an exception but returning it instead. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadJson</parametername>
</parameternamelist>
<parameterdescription>
<para>&gt;An arbitrary payload (already serialized to JSON)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoded body</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedSignature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature to validate with</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ex</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting validation exception, if any</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if exception is <ref refid="namespace_j_w_t" kindref="compound">JWT</ref> is valid and exception is null, otherwise false</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" line="39" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interface_j_w_t_1_1_i_jwt_validator_1a6be9333406c4dca495d0524a2a269d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JWT.IJwtValidator.TryValidate</definition>
        <argsstring>(string payloadJson, string signature, string[] decodedSignature, out Exception ex)</argsstring>
        <name>TryValidate</name>
        <qualifiedname>JWT.IJwtValidator.TryValidate</qualifiedname>
        <reimplementedby refid="class_j_w_t_1_1_jwt_validator_1a4b76397cce0223e28bc1797b2827e7f4">TryValidate</reimplementedby>
        <param>
          <type>string</type>
          <declname>payloadJson</declname>
        </param>
        <param>
          <type>string</type>
          <declname>signature</declname>
        </param>
        <param>
          <type>string[]</type>
          <declname>decodedSignature</declname>
        </param>
        <param>
          <type>out Exception</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Given the <ref refid="namespace_j_w_t" kindref="compound">JWT</ref>, verifies its signature correctness without throwing an exception but returning it instead. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadJson</parametername>
</parameternamelist>
<parameterdescription>
<para>&gt;An arbitrary payload (already serialized to JSON)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>Decoded body</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedSignature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signatures to validate with</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ex</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting validation exception, if any</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns <computeroutput>true</computeroutput> if exception is <ref refid="namespace_j_w_t" kindref="compound">JWT</ref> is valid and exception is null, otherwise false</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" line="49" column="14"/>
      </memberdef>
      <memberdef kind="function" id="interface_j_w_t_1_1_i_jwt_validator_1ad83594c87fa12d650d63b096550f9bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JWT.IJwtValidator.TryValidate</definition>
        <argsstring>(string payloadJson, IAsymmetricAlgorithm alg, byte[] bytesToSign, byte[] decodedSignature, out Exception ex)</argsstring>
        <name>TryValidate</name>
        <qualifiedname>JWT.IJwtValidator.TryValidate</qualifiedname>
        <reimplementedby refid="class_j_w_t_1_1_jwt_validator_1a274e40b60c7065846b331227ab99a92f">TryValidate</reimplementedby>
        <param>
          <type>string</type>
          <declname>payloadJson</declname>
        </param>
        <param>
          <type><ref refid="interface_j_w_t_1_1_algorithms_1_1_i_asymmetric_algorithm" kindref="compound">IAsymmetricAlgorithm</ref></type>
          <declname>alg</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>bytesToSign</declname>
        </param>
        <param>
          <type>byte[]</type>
          <declname>decodedSignature</declname>
        </param>
        <param>
          <type>out Exception</type>
          <declname>ex</declname>
        </param>
        <briefdescription>
<para>Given the <ref refid="namespace_j_w_t" kindref="compound">JWT</ref>, verifies its signatures correctness without throwing an exception but returning it instead. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payloadJson</parametername>
</parameternamelist>
<parameterdescription>
<para>&gt;An arbitrary payload (already serialized to JSON)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alg</parametername>
</parameternamelist>
<parameterdescription>
<para>The asymmetric algorithm to validate with</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytesToSign</parametername>
</parameternamelist>
<parameterdescription>
<para>The header and payload bytes to validate</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decodedSignature</parametername>
</parameternamelist>
<parameterdescription>
<para>The decodedSignatures to validate with</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ex</parametername>
</parameternamelist>
<parameterdescription>
<para>Validation exception, if any</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if exception is <ref refid="namespace_j_w_t" kindref="compound">JWT</ref> is valid and exception is null, otherwise false</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" line="60" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a <ref refid="namespace_j_w_t" kindref="compound">JWT</ref> validator. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>JWT.IJwtValidator</label>
        <link refid="interface_j_w_t_1_1_i_jwt_validator"/>
      </node>
      <node id="2">
        <label>JWT.JwtValidator</label>
        <link refid="class_j_w_t_1_1_jwt_validator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" line="9" column="22" bodyfile="C:/Users/adenf/RiderProjects/Openlabs.Mgcxm/Openlabs.Mgcxm/JWT/IJwtValidator.cs" bodystart="10" bodyend="61"/>
    <listofallmembers>
      <member refid="interface_j_w_t_1_1_i_jwt_validator_1a00359e1aaa882dce7d2bc71794e3df6a" prot="public" virt="non-virtual"><scope>JWT::IJwtValidator</scope><name>TryValidate</name></member>
      <member refid="interface_j_w_t_1_1_i_jwt_validator_1a6be9333406c4dca495d0524a2a269d76" prot="public" virt="non-virtual"><scope>JWT::IJwtValidator</scope><name>TryValidate</name></member>
      <member refid="interface_j_w_t_1_1_i_jwt_validator_1ad83594c87fa12d650d63b096550f9bef" prot="public" virt="non-virtual"><scope>JWT::IJwtValidator</scope><name>TryValidate</name></member>
      <member refid="interface_j_w_t_1_1_i_jwt_validator_1ac2a038110fce4e9543386421dc866497" prot="public" virt="non-virtual"><scope>JWT::IJwtValidator</scope><name>Validate</name></member>
      <member refid="interface_j_w_t_1_1_i_jwt_validator_1a3338c5c0f418836f9eaf1a84482ce5b9" prot="public" virt="non-virtual"><scope>JWT::IJwtValidator</scope><name>Validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
