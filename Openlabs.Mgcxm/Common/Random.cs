// Copr. (c) Nexus 2023. All rights reserved.
#define USE_SYSTEM_RANDOM

using Openlabs.Mgcxm.Internal.SystemObjects;

namespace Openlabs.Mgcxm.Common;

/// <summary>
/// A utility class for generating random numbers and filling buffers with random data.
/// </summary>
public static class Random
{
#if (!USE_SYSTEM_RANDOM)
    /// <summary>
    /// Performs the PCG hash algorithm on the input to generate a pseudo-random number.
    /// </summary>
    /// <param name="input">The input value to be hashed.</param>
    /// <returns>A pseudo-random number generated by the PCG hash algorithm.</returns>
    private static int PcgHash(long input)
    {
        var state = (int)input * 747796405 + 2891336453;
        var word = ((int)state >> (((int)state >> 28) + 4)) * 277803737;
        return (word >> 22) ^ word;
    }
#endif

    /// <summary>
    /// Initializes the random number generator with the given state.
    /// </summary>
    /// <param name="state">The initial state for the random number generator.</param>
    public static void Init(long state)
    {
#if (!USE_SYSTEM_RANDOM)
        _state = state;
#elif (USE_SYSTEM_RANDOM)
        _rng = new System.Random((int)state);
#endif
    }

    /// <summary>
    /// Generates a random integer within the specified range [min, max].
    /// </summary>
    /// <param name="min">The minimum value of the range.</param>
    /// <param name="max">The maximum value of the range.</param>
    /// <returns>A random integer within the specified range [min, max].</returns>
    public static int Range(int min, int max)
    {
#if (!USE_SYSTEM_RANDOM)
        int range = max - min + 1;
        int random = Math.Abs(PcgHash(_state));

        random %= range;
        random += min;

        return random;
#elif (USE_SYSTEM_RANDOM)
        return _rng.Next(min, max);
#endif
    }

    /// <summary>
    /// Fills the given buffer with random byte data.
    /// </summary>
    /// <param name="buffer">The buffer to fill with random byte data.</param>
    public static void FillBuffer(byte[] buffer)
    {
        for (uint size = 0; size < buffer.Length; size++)
            buffer[size] = (byte)Range(byte.MinValue, byte.MaxValue);
    }

#if (!USE_SYSTEM_RANDOM)
    private static MgcxmLong _state;
#elif (USE_SYSTEM_RANDOM)
    private static System.Random _rng;
#endif
}
